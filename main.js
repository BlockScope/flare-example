// Generated by psc-bundle 0.7.6.1
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Show = function (show) {
      this.show = show;
  };                                                                           
  var unit = {};
  var showNumber = new Show($foreign.showNumberImpl);
  var show = function (dict) {
      return dict.show;
  };                                                                     
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (__dict_Applicative_2) {
      return pure(__dict_Applicative_2);
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (__dict_Functor_5) {
      return map(__dict_Functor_5);
  };
  var id = function (dict) {
      return dict.id;
  };
  var $$const = function (a) {
      return function (_3) {
          return a;
      };
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var bind = function (dict) {
      return dict.bind;
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (__dict_Apply_25) {
      return apply(__dict_Apply_25);
  };
  var liftA1 = function (__dict_Applicative_26) {
      return function (f) {
          return function (a) {
              return $less$times$greater(__dict_Applicative_26["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_26)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (__dict_Semigroup_28) {
      return append(__dict_Semigroup_28);
  };
  var ap = function (__dict_Monad_30) {
      return function (f) {
          return function (a) {
              return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                  return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                      return $$return(__dict_Monad_30["__superclass_Prelude.Applicative_0"]())(_2(_1));
                  });
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports["compose"] = compose;
  exports["const"] = $$const;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["semigroupArray"] = semigroupArray;
  exports["showNumber"] = showNumber;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var $times$greater = function (__dict_Apply_1) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](__dict_Apply_1)(Prelude["<$>"](__dict_Apply_1["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (__dict_Apply_5) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return Prelude["<*>"](__dict_Apply_5)(Prelude["<$>"](__dict_Apply_5["__superclass_Prelude.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["lift2"] = lift2;
  exports["*>"] = $times$greater;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (__dict_Applicative_0) {
      return function (__dict_Foldable_1) {
          return function (f) {
              return foldr(__dict_Foldable_1)(function (_109) {
                  return Control_Apply["*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(f(_109));
              })(Prelude.pure(__dict_Applicative_0)(Prelude.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (__dict_Foldable_26) {
      return function (__dict_Monoid_27) {
          return function (f) {
              return function (xs) {
                  return foldr(__dict_Foldable_26)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](__dict_Monoid_27["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(__dict_Monoid_27))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (__dict_Monoid_28) {
      return foldMapDefaultR(foldableArray)(__dict_Monoid_28);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["traverse_"] = traverse_;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.renderString = function(target) {
    return function(content) {
      return function() {
        document.getElementById(target).innerHTML = content;
      };
    };
  };

  exports.removeChildren = function(target) {
    return function() {
      var el = document.getElementById(target);

      // http://stackoverflow.com/a/3955238/704831
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
  };

  exports.appendComponent = function(target) {
    return function(el) {
      return function() {
        document.getElementById(target).appendChild(el);
      };
    };
  };

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(id) {
      return function(initial) {
        return function(send) {
          return function() {
            var el = elementCallback(initial);
            el.className = "flare-input-" + inputType;

            var div = document.createElement("div");
            div.className = "flare-input";

            if (id !== "") {
              el.id = id;
              var label = document.createElement("label");
              label.htmlFor = id;
              label.appendChild(document.createTextNode(id));
              div.appendChild(label);
            }

            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  }

  exports.cNumber = createComponent("number",
    function(initial) {
      var input = document.createElement("input");
      input.type = "number";
      input.step = "any";
      input.value = initial.toString();
      return input;
    },
    "input",
    function(t, initial) {
      var val = parseFloat(t.value);
      return (isNaN(val) ? initial : val);
    }
  );

  function clamp(min, max, initial, value) {
    if (isNaN(value)) {
      return initial;
    } else if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    }
    return value;
  } 

  exports.cRadioGroup = function(xs) {
    return function(toString) {
      return function(id) {
        return createComponent("radioGroup",
          function(initial) {
            var fieldset = document.createElement("fieldset");

            if (id !== "") {
              var legend = document.createElement("legend");
              legend.appendChild(document.createTextNode(id));
              fieldset.appendChild(legend);
            }

            var x, xid, op, label;
            for (var i = 0; i < xs.length + 1; i++) {
              x = (i === 0) ? initial : xs[i - 1];
              xid = id + "-" + i.toString();

              op = document.createElement("input");
              op.type = "radio";
              op.name = id;
              op.id = xid;
              if (i === 0) {
                op.checked = "checked";
              }
              fieldset.appendChild(op);

              label = document.createElement("label");
              label.appendChild(document.createTextNode(toString(x)));
              label.htmlFor = xid;
              fieldset.appendChild(label);
            }

            return fieldset;
          },
          "change",
          function(t, initial) {
            var ix = parseInt(t.id.substr(id.length + 1), 10);
            if (ix === 0) {
              return initial;
            }
            return xs[ix - 1];
          }
        )("");
      };
    };
  };

  // vim: ts=2:sw=2
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };


  exports.applySigP =
    function applySigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun.get()(sig.get()));
          var produce = function() { out.set(fun.get()(sig.get())); };
          fun.subscribe(produce);
          sig.subscribe(produce);
          return out;
        };
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];                 
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var applySig = $foreign.applySigP($foreign.constant);
  var applySignal = new Prelude.Apply(function () {
      return functorSignal;
  }, applySig);
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan, v) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];     
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["send"] = send;
  exports["channel"] = channel;
  exports["subscribe"] = $foreign.subscribe;;
 
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Flare"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];     
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };
  var runFlareWith = function (controls) {
      return function (handler) {
          return function (_10) {
              return function __do() {
                  var _6 = _10();
                  $foreign.removeChildren(controls)();
                  Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)($foreign.appendComponent(controls))(_6.value0)();
                  return Signal.runSignal(Prelude.map(Signal.functorSignal)(handler)(_6.value1))();
              };
          };
      };
  };
  var runFlare = function (controls) {
      return function (target) {
          return runFlareWith(controls)($foreign.renderString(target));
      };
  };
  var functorFlare = new Prelude.Functor(function (f) {
      return function (_11) {
          return new Flare(_11.value0, Prelude.map(Signal.functorSignal)(f)(_11.value1));
      };
  });
  var functorUI = new Prelude.Functor(function (f) {
      return function (_14) {
          return UI(Prelude.map(Control_Monad_Eff.functorEff)(Prelude.map(functorFlare)(f))(_14));
      };
  });
  var createUI = function (createComp) {
      return function (id) {
          return function ($$default) {
              return UI(function __do() {
                  var _1 = Signal_Channel.channel($$default)();
                  var _0 = createComp(id)($$default)(Signal_Channel.send(_1))();
                  return (function () {
                      var signal = Signal_Channel.subscribe(_1);
                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare([ _0 ], signal));
                  })()();
              });
          };
      };
  };                             
  var number = createUI($foreign.cNumber);
  var radioGroup = function (id) {
      return function ($$default) {
          return function (xs) {
              return function (toString) {
                  return createUI($foreign.cRadioGroup(xs)(toString))(id)($$default);
              };
          };
      };
  };                           
  var applyFlare = new Prelude.Apply(function () {
      return functorFlare;
  }, function (_12) {
      return function (_13) {
          return new Flare(Prelude["<>"](Prelude.semigroupArray)(_12.value0)(_13.value0), Prelude["<*>"](Signal.applySignal)(_12.value1)(_13.value1));
      };
  });
  var applyUI = new Prelude.Apply(function () {
      return functorUI;
  }, function (_15) {
      return function (_16) {
          return UI(Control_Apply.lift2(Control_Monad_Eff.applyEff)(Prelude.apply(applyFlare))(_15)(_16));
      };
  });
  exports["runFlare"] = runFlare;
  exports["runFlareWith"] = runFlareWith;
  exports["radioGroup"] = radioGroup;
  exports["number"] = number;
  exports["functorFlare"] = functorFlare;
  exports["applyFlare"] = applyFlare;
  exports["functorUI"] = functorUI;
  exports["applyUI"] = applyUI;;
 
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.round = Math.round;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Math"];
  exports["round"] = $foreign.round;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var $$Math = PS["Math"];
  var Flare = PS["Flare"];     
  var Celsius = (function () {
      function Celsius() {

      };
      Celsius.value = new Celsius();
      return Celsius;
  })();
  var Kelvin = (function () {
      function Kelvin() {

      };
      Kelvin.value = new Kelvin();
      return Kelvin;
  })();
  var Fahrenheit = (function () {
      function Fahrenheit() {

      };
      Fahrenheit.value = new Fahrenheit();
      return Fahrenheit;
  })();
  var toString = function (_0) {
      if (_0 instanceof Celsius) {
          return "\xb0C";
      };
      if (_0 instanceof Kelvin) {
          return "K";
      };
      if (_0 instanceof Fahrenheit) {
          return "\xb0F";
      };
      throw new Error("Failed pattern match at Main line 9, column 1 - line 10, column 1: " + [ _0.constructor.name ]);
  };
  var toKelvin = function (_1) {
      return function (_2) {
          if (_1 instanceof Celsius) {
              return _2 + 273.15;
          };
          if (_1 instanceof Kelvin) {
              return _2;
          };
          if (_1 instanceof Fahrenheit) {
              return ((_2 + 459.67) * 5.0) / 9.0;
          };
          throw new Error("Failed pattern match at Main line 14, column 1 - line 15, column 1: " + [ _1.constructor.name, _2.constructor.name ]);
      };
  };
  var fromKelvin = function (_3) {
      return function (_4) {
          if (_3 instanceof Celsius) {
              return _4 - 273.15;
          };
          if (_3 instanceof Kelvin) {
              return _4;
          };
          if (_3 instanceof Fahrenheit) {
              return (_4 * 9.0) / 5.0 - 459.67;
          };
          throw new Error("Failed pattern match at Main line 19, column 1 - line 20, column 1: " + [ _3.constructor.name, _4.constructor.name ]);
      };
  };
  var convert = function (from) {
      return function (to) {
          return function (_10) {
              return $$Math.round(fromKelvin(to)(toKelvin(from)(_10)));
          };
      };
  };
  var render = function (t) {
      return function (from) {
          return function (to) {
              var t$prime = convert(from)(to)(t);
              return Prelude.show(Prelude.showNumber)(t) + (toString(from) + (" corresponds to " + (Prelude.show(Prelude.showNumber)(t$prime) + toString(to))));
          };
      };
  };
  var flare = (function () {
      var unit = function (label) {
          return Flare.radioGroup(label)(Celsius.value)([ Kelvin.value, Fahrenheit.value ])(toString);
      };
      return Prelude["<*>"](Flare.applyUI)(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(render)(Flare.number("Temperature")(100.0)))(unit("Unit")))(unit("Convert to"));
  })();
  var main = Flare.runFlare("controls")("output")(flare);
  exports["Celsius"] = Celsius;
  exports["Kelvin"] = Kelvin;
  exports["Fahrenheit"] = Fahrenheit;
  exports["main"] = main;
  exports["flare"] = flare;
  exports["render"] = render;
  exports["convert"] = convert;
  exports["fromKelvin"] = fromKelvin;
  exports["toKelvin"] = toKelvin;
  exports["toString"] = toString;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();
